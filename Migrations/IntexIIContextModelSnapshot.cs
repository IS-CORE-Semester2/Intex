// <auto-generated />
using System;
using Intex;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Intex.Migrations
{
    [DbContext(typeof(IntexIIContext))]
    partial class IntexIIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Intex.C14Data", b =>
                {
                    b.Property<int>("BurialNumber")
                        .HasColumnName("Burial Number")
                        .HasColumnType("int");

                    b.Property<int?>("Area")
                        .HasColumnType("int");

                    b.Property<int?>("C14Sample2017")
                        .HasColumnName("C14 Sample 2017")
                        .HasColumnType("int");

                    b.Property<string>("Calibrated95CalendarDateAvg")
                        .HasColumnName("Calibrated 95% Calendar Date AVG")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<int?>("Calibrated95CalendarDateMax")
                        .HasColumnName("Calibrated 95% Calendar Date MAX")
                        .HasColumnType("int");

                    b.Property<int?>("Calibrated95CalendarDateMin")
                        .HasColumnName("Calibrated 95% Calendar Date MIN")
                        .HasColumnType("int");

                    b.Property<int?>("Calibrated95CalendarDateSpan")
                        .HasColumnName("Calibrated 95% Calendar Date SPAN")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<int?>("Conventional14cAgeBp")
                        .HasColumnName("Conventional 14C Age BP")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nchar(1000)")
                        .IsFixedLength(true)
                        .HasMaxLength(1000);

                    b.Property<string>("EastWestLetter")
                        .HasColumnName("East West Letter")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int?>("EastWestNumber")
                        .HasColumnName("East West Number")
                        .HasColumnType("int");

                    b.Property<int?>("Foci")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nchar(1000)")
                        .IsFixedLength(true)
                        .HasMaxLength(1000);

                    b.Property<string>("NorthSouthLetter")
                        .HasColumnName("North South Letter")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int?>("NorthSouthNumber")
                        .HasColumnName("North South Number")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<int?>("OtherNumber")
                        .HasColumnName("Other Number")
                        .HasColumnType("int");

                    b.Property<string>("QuestionS")
                        .HasColumnName("Question(s)")
                        .HasColumnType("nchar(1000)")
                        .IsFixedLength(true)
                        .HasMaxLength(1000);

                    b.Property<int?>("Rack")
                        .HasColumnType("int");

                    b.Property<int?>("SizeMl")
                        .HasColumnName("Size (ml)")
                        .HasColumnType("int");

                    b.Property<string>("Square")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int?>("TubeNumber")
                        .HasColumnName("Tube Number")
                        .HasColumnType("int");

                    b.Property<int?>("_14cCalendarDate")
                        .HasColumnName("14C Calendar Date")
                        .HasColumnType("int");

                    b.HasKey("BurialNumber");

                    b.ToTable("C14 Data");
                });
#pragma warning restore 612, 618
        }
    }
}
